
                DOCKER NOTES
                ============
 - Basic

   A. To install Docker on CentOS 7/RHEL 7
   A1. Proxy Settings
   B. To start Docker
   C. Running Docker Containers
   D. Investigating Docker container
   E. Starting and Stopping Containers
   F. Removing Docker images and containers

 - Intermediate

   A. Creating Image from Container
   B. Dockerfile

 - Miscellaneous Notes


 - Basic

   A. To install Docker on CentOS 7/RHEL 7
   -----------------------------------------

     > yum install docker docker-registry
     > yum install device-mapper-libs device-mapper-event-libs
     > docker version
     > docker info

   A1. Proxy Settings
   ------------------

   Using Docker when behind corporate proxy server

     vi /etc/yum.conf
        # Add to bottom of file
        proxy=http://10.132.230.33:8080
        proxy_username=e1047594
        proxy_password=sep2015!

     vi /etc/sysconfig/docker
        # Add to bottom of file
        HTTP_PROXY="http://e1047594:sep2015!@10.132.230.33:8080"
        HTTPS_PROXY="https://e1047594:sep2015!@10.132.230.33:8080"

     mkdir /etc/systemd/system/docker.service.d
     vi /etc/systemd/system/docker.service.d/http-proxy.conf
        [Service]
        Environment="HTTP_PROXY="https://10.132.230.33:8080"

     sudo systemctl daemon-reload

   B. To start Docker
   ------------------

     > setenforce permissive
     > systemctl start docker.service
     > systemctl status docker.service
     > systemctl is-active docker

   To see all local images

     > docker pull centos   # will pull images from docker.io
     > docker images


   C. Running Docker Containers
   ----------------------------

    When you execute a "docker run" command, you essentially spin up and create
    a new container from a Docker image. That container consists of the contents
    of the image, plus features based on any additional options you pass on the
    docker run command line.

    The command you pass on the "docker run" command line sees the inside the
    container as its running environment so, by default, very little can be seen
    of the host system. For example, by default, the running applications sees:

      * The filesystem provided by the Docker image.

      * A new process table from inside the container (no processes from the
        host can be seen).

      * New network interfaces (by default, a separate docker network interface
        provides a private IP address to each containter via DHCP).

    If you want to make a directory from the host available to the container,
    map network ports from the container to the host, limit the amount of memory
    the container can use, or expand the CPU shares available to the container,
    you can do those things from the "docker run" command line.


    Example 1: Check the IP address of docker container

     > docker run --rm centos ip addr show eth0 | grep -w inet
     > docker run -v /usr/sbin:/usr/sbin --rm centos \
       /usr/sbin/ip addr show eth0

    Note: If you wanted to keep around and reuse the container, assign a
        name to it, so you can start it again later.

     > docker run --name=myipaddr centos ip addr show eth0 | grep -w inet
     > docker ps -a
     > docker start -i myipaddr # Run container using previous command


    Example 2: Run a shell inside the container.

     > docker run --name=mybash -it centos /bin/bash

     (The -i creates an interactive session and -t opens a terminal session.
     Without -i, the shell would open and then exit. Without -t, the shell would
     stay open, but you wouldn't be able to type anything to the shell.)

     Once inside the container, you can run commands and install packages.  And
     after you exit from the container, the new package is still installed. To
     restart the mybash container.

     > docker ps -a
     > docker start -ai mybash

     (The -a is for attach terminal, -i is for interactive)

    NOTE: When mybash container is restarted, shell can be access.  Whereas
        myipaddr can only be rerun with it's previous arguments but cannot be
        access from shell.


    Example 3: Bind volume from host to container.  Mount the host's /dev/log
    device inside the container. This example illustrates how to run an app
    in rhel container that is named log_test that generates log messages.

     > docker run --name="log_test" -v /dev/log:/dev/log --rm centos logger \
       "Testing logging to the host"
     > journalctl -b | grep Testing


   D. Investigating Docker container
   ---------------------------------

     Example 1: To inspect metadata of an existing container

      > docker inspect mybash
      > docker inspect --format='{{.State.Running}}' mybash


     Example 2: Enter command on a running container with docker exec.

      > docker run -d -t --name=myrhel_httpd -p 80:80 -i rhel_httpd \
        /usr/sbin/httpd -DFOREGROUND
      > docker exec -it myrhel_httpd /bin/bash

      NOTE: 'exec' command doesn't work on stopped container, only on running one.


   E. Starting and Stopping Containers
   -----------------------------------

      > docker ps -l    # show existing containers, no myrhel_httpd exist
      > docker run -d -t --name=myrhel_httpd -p 80:80 -i rhel_httpd \
        /usr/sbin/httpd -DFOREGROUND
      > docker ps       # show running containers ie. myrhel_httpd
      > docker exect -it myrhel_httpd /bin/bash  # connect to container
      > docker stop myrhel_httpd
      > docker ps -l
      > docker exect -it myrhel_httpd /bin/bash  # ERROR!!
      > docker start myrhel_httpd
      > docker exect -it myrhel_httpd /bin/bash  # SUCCESS!!
      > docker kill myrhel_httpd    # More forceful alternative to 'stop'

   F. Removing Docker images and containers
   ----------------------------------------

     Example 1: To remove a single image

      > docker rm $(docker ps -a -q) # Delete all containers
      > docker rm $(docker kill $(docker ps -aq)) # Kill containers and remove
      (Replace 'kill' with 'stop' for graceful shutdown)

      > docker rmi <image>  # Remove an image
      > docker rmi $(docker images -qf "dangling=true") # Remove all images
      > docker rmi $(docker images -q) # same as above

    NOTE: Before deleting an image, stop and remove all it's container first.


 - Intermediate
 **************

   A. Creating Image from Container
   --------------------------------


   B. Dockerfile
   -------------

     Building container images from Dockerfile files is by far the preferred way
     to create Docker formatted containers, as compared to modifying running
     containers and committing them to images.

     We recommend the Dockerfile approach over "docker commit" because it
     provides a more repeatable, transparent, and idempotent mechanism for
     creating images.

     NOTE: By default, docker build will use the most recent version of the
     base image you identify from your local cache. You may want to pull
     (docker pull command) the most recent version of an image from the remote
     Docker repository before you build your new image. If you want a specific
     instance of an image, make sure you identify the tag. For example, just
     asking for the image centos will pull the centos:latest image. If you
     wanted the image for CentOS 6, you should specifically pull the
     centos:centos6 image.

     1. Create project directories.

        > mkdir -p httpd-project
        > cd httpd-project

     2. Create the Dockerfile file.

        FROM centos
        MAINTAINER Gene Ordanza "gene.ordanza@gmail.com"

        ENV REFRESHED_AT 2015-10-05

        RUN yum -y install httpd
        RUN echo container.example.com > /etc/hostname
        RUN bash -c 'echo "Your Docker Web Server" >> /var/www.html/index.html

     3. Build the image

        NOTE: Consider using the --no-cache option with docker build. Using
        --no-cache prevents the caching of each build layer, which can cause you
        to consume excessive disk space.

        > docker --no-cache build -t rhel_httpd

     4. Run the httpd server.

        > docker run -d -t --name=myrhel_httpd -p 80:80 -i rhel_httpd \
          /usr/sbin/httpd -DFOREGROUND
        > netstat -tupln | grep 80
        > curl localhost:80



 - Miscellaneous Notes
 *********************

   * RHEL Atomic is a light-weight Linux operating system distribution that was
     designed specifically for running containers. It contains the docker
     service, as well as some services that can be used to orchestrate and
     manage Docker containers, including Kubernetes and Etcd services.

     RHEL Atomic is more like an appliance than a full-featured Linux system, it
     is not made for you to install RPM packages.  It has a mechanism for
     updating existing packages, but not for allowing users to add new packages.
     Therefore, you should consider using a standard RHEL 7 server system to
     develop your applications.

